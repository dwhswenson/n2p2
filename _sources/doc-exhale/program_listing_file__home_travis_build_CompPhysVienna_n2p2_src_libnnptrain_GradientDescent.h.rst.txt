
.. _program_listing_file__home_travis_build_CompPhysVienna_n2p2_src_libnnptrain_GradientDescent.h:

Program Listing for File GradientDescent.h
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_travis_build_CompPhysVienna_n2p2_src_libnnptrain_GradientDescent.h>` (``/home/travis/build/CompPhysVienna/n2p2/src/libnnptrain/GradientDescent.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // n2p2 - A neural network potential package
   // Copyright (C) 2018 Andreas Singraber (University of Vienna)
   //
   // This program is free software: you can redistribute it and/or modify
   // it under the terms of the GNU General Public License as published by
   // the Free Software Foundation, either version 3 of the License, or
   // (at your option) any later version.
   //
   // This program is distributed in the hope that it will be useful,
   // but WITHOUT ANY WARRANTY; without even the implied warranty of
   // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   // GNU General Public License for more details.
   //
   // You should have received a copy of the GNU General Public License
   // along with this program.  If not, see <https://www.gnu.org/licenses/>.
   
   #ifndef GRADIENTDESCENT_H
   #define GRADIENTDESCENT_H
   
   #include "Updater.h"
   #include <cstddef> // std::size_t
   #include <string>  // std::string
   #include <vector>  // std::vector
   
   namespace nnp
   {
   
   class GradientDescent : public Updater
   {
   public:
       enum DescentType
       {
           // Fixed step size.
           DT_FIXED
       };
   
       GradientDescent(DescentType const type, std::size_t const sizeState);
       ~GradientDescent() {};
       void                     setState(double* state);
       void                     setError(double const* const error);
       void                     setDerivativeMatrix(
                                                 double const* const derivatives);
       void                     update();
       void                     setParametersFixed(double const eta);
       std::string              status(std::size_t epoch) const;
       std::vector<std::string> statusHeader() const;
       std::vector<std::string> info() const;
   
   private:
       DescentType   type;
       std::size_t   sizeState;
       double        eta;
       double*       state;
       double const* error;
       double const* derivatives;
   };
   
   }
   
   #endif
